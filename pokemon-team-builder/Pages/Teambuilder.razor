@page "/teambuilder"
@using pokemon_team_builder.Components
@using pokemon_team_builder.PokemonCommon
@using pokemon_team_builder.Services
@inject PokeApiService pokeService
<h3>Teambuilder</h3>

@if (PokemonInDex.Count > 0 && Loaded)
{
    <Div>
        <Div>
            <Button Color="Color.Primary" Clicked=@(() => PokemonInDex.Clear())>
                Back
            </Button>

            <Button Color="Color.Secondary" Clicked=@(() => SaveTeam())>
                Save to Profile
            </Button>
        </Div>

        <Div>

            <Div>
                @foreach (int selectedNatDexId in SelectedTeam)
                {
                    <Button Clicked=@(() => RemoveFromTeam(selectedNatDexId))>
                        <PokemonComponent PokedexId=@selectedNatDexId />
                    </Button>
                }
            </Div>

            <Div>
                @foreach (PokemonEntry pokemon in PokemonInDex)
                {
                    <Button Clicked=@(() => AddToTeam(PokemonUtilities.GetNatDexId(pokemon.PokemonSpecies.Url)))>
                        <PokemonComponent PokedexId=@PokemonUtilities.GetNatDexId(pokemon.PokemonSpecies.Url) />
                    </Button>
                }
            </Div>
        </Div>
    </Div>
}

@if (PokemonInDex.Count == 0)
{
    <Button Clicked=@(async () => await GetPokedex("kalos"))>
        <Figure>
            <FigureImage Source="/game/xy.png" />
        </Figure>
    </Button>

    <Button Clicked=@(async () => await GetPokedex("updated-hoenn"))>
        <Figure>
            <FigureImage Source="/game/oras.png" />
        </Figure>
    </Button>

    <Button Clicked=@(async () => await GetPokedex("alola"))>
        <Figure>
            <FigureImage Source="/game/sm.png" />
        </Figure>
    </Button>

    <Button Clicked=@(async () => await GetPokedex("alola"))>
        <Figure>
            <FigureImage Source="/game/usum.png" />
        </Figure>
    </Button>

    <Button Clicked=@(async () => await GetPokedex("letsgo-kanto"))>
        <Figure>
            <FigureImage Source="/game/lgpe.png" />
        </Figure>
    </Button>

    <Button Clicked=@(async () => await GetPokedex("galar"))>
        <Figure>
            <FigureImage Source="/game/swsh.png" />
        </Figure>
    </Button>
}


@code {

    bool Loaded = true;

    List<PokemonEntry> PokemonInDex { get; set; } = new List<PokemonEntry>();

    private List<int> SelectedTeam { get; set; } = new List<int>(6) { 0, 0, 0, 0, 0, 0 };

    /// <summary>
    /// Saves the team to the given user's profile.
    /// </summary>
    private void SaveTeam() {
        // need to inject service and call a save to the backend api
    }

    /// <summary>
    /// Adds the given Pokemon from the team.
    /// </summary>
    /// <param name="natDexId">Pokemon's NatDexId to add to the team.</param>
    private void AddToTeam(int natDexId)
    {
        // TODO this needs to get the idx of the id, not the id itself
        Console.WriteLine($"natidx {natDexId}");
        int idxToReplace = SelectedTeam.IndexOf(0);
        if(idxToReplace < 0) { idxToReplace = SelectedTeam.Count - 1; } // IndexOf returns -1 if not found
        Console.WriteLine(idxToReplace);
        SelectedTeam[idxToReplace] = natDexId;
        // Updating SelectedTeam is not working
        StateHasChanged();
    }

    /// <summary>
    /// Removes the given Pokemon from the team.
    /// </summary>
    /// <param name="natDexId">Pokemon's NatDexId to remove from the team.</param>
    private void RemoveFromTeam(int natDexId)
    {
        // TODO this needs to get the idx of the id, not the id itself
        int idxToReplace = SelectedTeam.IndexOf(natDexId);
        Console.WriteLine($"natidx {natDexId}");
        Console.WriteLine(idxToReplace);
        SelectedTeam[idxToReplace] = 0;
        StateHasChanged();
    }

    /// <summary>
    /// Populates the Pokedex of this page with the given integers.
    /// </summary>
    /// <param name="dexes">The Pokedexes we want.</param>
    /// <returns>Awaits the addition of the api calls</returns>
    private async Task PopulateDex(List<int> dexes)
    {
        foreach (int dexId in dexes)
        {
            Pokedex pokedex = await pokeService.GetPokedex(dexId); // get all kanto pokemon 0-151
            PokemonInDex.AddRange(pokedex.PokemonEntries); // all entries 0-151 with the correct id to grab
        }

        Loaded = true;
    }

    /// <summary>
    /// Gets the Pokedex (or multiple) for the given region.
    /// </summary>
    /// <param name="region">The region whose Pokedex we want.</param>
    /// <returns>Awaits the population of the Pokedex.</returns>
    private async Task GetPokedex(string region)
    {
        Loaded = false;
        List<int> dexes = PokeApiConstants.RegionMappings[region];
        await PopulateDex(dexes);
    }
}
