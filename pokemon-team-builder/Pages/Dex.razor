@page "/pokedex"
@using pokemon_team_builder.Components
@using pokemon_team_builder.PokemonCommon
@using pokemon_team_builder.Services
@inject PokeApiService pokeService

<h3>Pokedex</h3>

<Div>
    <Blazorise.Components.Autocomplete TItem="PokemonEntry"
                                       TValue="PokemonEntry"
                                       Data="@PokemonInDex"
                                       TextField="@((item) => item.PokemonSpecies.Name)"
                                       ValueField="@((item) => item)"
                                       Placeholder="Search ..."
                                       Filter="Blazorise.Components.AutocompleteFilter.StartsWith">
        <NotFoundContent> Sorry ... @context was not found.</NotFoundContent>
    </Blazorise.Components.Autocomplete>

    <Div>
        <Button Color="Color.Primary" Clicked="@ClearFilters">Clear Filters</Button>

        <Div>
            <Label>Type 1: </Label>
            <Select TValue="string" SelectedValue=@Type1 SelectedValueChanged=@FilterDexByType>
                <SelectItem @key="@String.Empty" Value="@String.Empty"></SelectItem>
                @foreach (string type in Types1)
                {
                    <SelectItem @key="@type" Value="@type">@type</SelectItem>
                }
            </Select>

            <Label>Type 2: </Label>
            <Select TValue="string" SelectedValue=@Type2 SelectedValueChanged=@FilterDexByType>
                <SelectItem @key="@String.Empty" Value="@String.Empty"></SelectItem>
                @foreach (string type in Types2)
                {
                    <SelectItem Value="@type">@type</SelectItem>
                }
            </Select>
        </Div>
    </Div>
</Div>

<Div>
    @foreach (PokemonEntry pokemon in PokemonInDex)
    {
        <PokemonComponent PokedexId=@PokemonUtilities.GetNatDexId(pokemon.PokemonSpecies.Url) />
    }
</Div>

@code {

    private string? Type1 { get; set; }
    private string? Type2 { get; set; }
    private IEnumerable<string> Types { get; set; } = PokeApiConstants.TypeMappings.Keys.ToList();
    private IEnumerable<string> Types1 { get; set; } = PokeApiConstants.TypeMappings.Keys.ToList();
    private IEnumerable<string> Types2 { get; set; } = PokeApiConstants.TypeMappings.Keys.ToList();

    List<PokemonEntry> PokemonInDex { get; set; } = new();
    List<PokemonEntry> NationalDex { get; set; } = new();

    /// <summary>
    /// Populates the displayed dex and the cached NationalDex.
    /// </summary>
    /// <returns>A Task for async purposes.</returns>
    protected override async Task OnInitializedAsync()
    {
        Pokedex pokedex = await pokeService.GetPokedex("national");
        PokemonInDex.AddRange(pokedex.PokemonEntries);
        NationalDex = pokedex.PokemonEntries;
    }

    /// <summary>
    /// Removes the filters from the displayed dex.
    /// </summary>
    private void ClearFilters()
    {
        Type1 = "";
        Type2 = "";
        PokemonInDex.Clear();
        PokemonInDex.AddRange(NationalDex);
        Console.WriteLine($"PokemonInDex count {PokemonInDex.Count}");
        Console.WriteLine($"NationalDex count {NationalDex.Count}");
    }



    /// <summary>
    /// Filters PokemonInDix by type.
    /// </summary>
    /// <param name="type">The type of Pokemon we are looking for.</param>
    private async Task FilterDexByType(string? type)
    { // TODO Fix the filters showing blank on selection
        Console.WriteLine(type);
        if (type is not null)
        {
            HashSet<string> pokemonOfType = await pokeService.GetPokemonOfType(type); // get the pokemon of that type
            PokemonInDex = PokemonInDex.Where(pokemon => pokemonOfType.Contains(pokemon.PokemonSpecies.Name)).ToList();
            Types1 = Types.Where(type => type != Type2);
            Types2 = Types.Where(type => type != Type1);
        }
    }
}