@page "/pokedex"
@inject PokeApiService pokeService
@inject NavigationManager UriHelper

<h3>Pokedex</h3>

<Div Class="float-start">
    <Div Class="float-start">
        <Div Class="float-end">
            <Div>
                <Label Class="top-50">Type 2: </Label>
            </Div>
            <RadzenDropDown TValue="string" Data=@Types2 Placeholder="Choose a type" AllowClear="true" AllowFiltering="true"
                            SelectedItemsText=@Type2 Change=@(async (args) => await TypeFilterChanged(args, true)) />
        </Div>
        <Div Class="float-end">
            <Div>
                <Label Class="top-50">Type 1: </Label>
            </Div>
            <RadzenDropDown TValue="string" Data=@Types1 Placeholder="Choose a type" AllowClear="true" AllowFiltering="true" SelectedItemsText=@Type1 Change=@(async (args) => await TypeFilterChanged(args, false)) />
        </Div>
    </Div>
</Div>
<Div Class="float-end">
    <RadzenDataGrid @ref="grid" Data=@PokemonInDex TItem="PokemonEntry" FilterMode="FilterMode.Simple" AllowFiltering="true" SelectionMode="DataGridSelectionMode.Single"
                    RowSelect=@NavigateToPokemon Count=@count>
        <Columns>
            <RadzenDataGridColumn TItem="PokemonEntry" Property="EntryNumber"
                                  Sortable="true" Filterable="true" Title="ID" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="PokemonEntry" Property="PokemonSpecies.Name"
                                  Sortable="true" Filterable="true" FilterOperator="FilterOperator.Contains" Title="Name" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="PokemonEntry" Title="Pokemon" Sortable="false" Filterable="false">
                <Template Context="pokemon">
                    <PokemonComponent NatDexId=@PokemonUtilities.GetNatDexId(pokemon.PokemonSpecies.Url) />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</Div>

@code {
    RadzenDataGrid<PokemonEntry> grid;

    private string Type1 { get; set; } = "";
    private string Type2 { get; set; } = "";
    private IEnumerable<string> Types { get; set; } = PokeApiConstants.TypeMappings.Keys.ToList();
    private IEnumerable<string> Types1 { get; set; } = PokeApiConstants.TypeMappings.Keys.ToList();
    private IEnumerable<string> Types2 { get; set; } = PokeApiConstants.TypeMappings.Keys.ToList();

    IEnumerable<PokemonEntry> PokemonInDex { get; set; }
    IEnumerable<PokemonEntry> NationalDex { get; set; }
    private int count = 0;

    /// <summary>
    /// Populates the displayed dex and the cached NationalDex.
    /// </summary>
    /// <returns>A Task for async purposes.</returns>
    protected override async Task OnInitializedAsync()
    {
        Pokedex pokedex = await pokeService.GetPokedex("national");
        PokemonInDex = pokedex.PokemonEntries.ToList();
        NationalDex = pokedex.PokemonEntries.ToList();
    }

    /// <summary>
    /// Navigates to the page for the selected pokemon.
    /// </summary>
    /// <param name="pokemon">The pokemon we want to see the page for.</param>
    private void NavigateToPokemon(PokemonEntry pokemon)
    {
        UriHelper.NavigateTo($"pokemon?pokemon={PokemonUtilities.GetNatDexId(pokemon.PokemonSpecies.Url)}");
    }

    /// <summary>
    /// Searches for all pokemon whose names start with the given string.
    /// </summary>
    /// <param name="args">The pokemon's name as an object.</param>
    private void SearchForMatchingPokemon(object args)
    {
        if (args is not null)
        {
            PokemonInDex = new List<PokemonEntry>();
            StateHasChanged();
            count = 0;
            string name = (string)args;
            PokemonInDex = NationalDex.Where(pokemon => pokemon.PokemonSpecies.Name.Contains(name)).ToList();
            count = PokemonInDex.Count();
            StateHasChanged();
        }
    }

    /// <summary>
    /// Sets the corresponding Type# property.
    /// </summary>
    /// <param name="type">The string to set the Type# to.</param>
    /// <param name="two">Are we changing the Type2 property.</param>
    private void ChangeType(string type, bool two)
    {
        if (!two)
        {
            Type1 = type;
        }
        if (two)
        {
            Type2 = type;
        }
    }

    /// <summary>
    /// Event handler for the Type Filters.
    /// </summary>
    /// <param name="args">The type (string) as an object.</param>
    /// <param name="two">Is this firing because it is for Type2?</param>
    /// <returns>Task for async purposes.</returns>
    private async Task TypeFilterChanged(object args, bool two)
    {
        PokemonInDex = new List<PokemonEntry>();
        StateHasChanged();
        count = 0;
        if (args is not null)
        {
            string type = (string)args;
            ChangeType(type, two);
        }
        if (args is null) // this event gets fired by clearing the dropdowns
        {
            ChangeType("", two);
        }

        //  get the Type that isn't null, refilter
        PokemonInDex = await FilterDex();
        count = PokemonInDex.Count();
        Types1 = Types.Where(type => type != Type2);
        Types2 = Types.Where(type => type != Type1);
        grid.Reset();
        await grid.Reload();
        StateHasChanged();
    }

    /// <summary>
    /// Filters the National Dex by the Type1 and Type2 properties.
    /// </summary>
    /// <returns>The pokemon of the correct types.</returns>
    private async Task<List<PokemonEntry>> FilterDex()
    {
        HashSet<string> pokemonOfType1;
        HashSet<string> pokemonOfType2;
        if (String.IsNullOrEmpty(Type1)) // if there is no filter, default to all pokemon
        {
            pokemonOfType1 = NationalDex.Select(x => x.PokemonSpecies.Name).ToHashSet();
        }
        else
        {
            pokemonOfType1 = await pokeService.GetPokemonOfType(Type1); // get the pokemon of that type
        }
        if (String.IsNullOrEmpty(Type2)) // if there is no filter, default to all pokemon

        {
            pokemonOfType2 = NationalDex.Select(x => x.PokemonSpecies.Name).ToHashSet();
        }
        else
        {
            pokemonOfType2 = await pokeService.GetPokemonOfType(Type2); // get the pokemon of that type
        }
        HashSet<string> pokemonOfBothTypes = pokemonOfType1.Where(pokemon => pokemonOfType2.Contains(pokemon)).ToHashSet();
        return NationalDex.Where(pokemon => pokemonOfBothTypes.Contains(pokemon.PokemonSpecies.Name)).ToList();
    }
}